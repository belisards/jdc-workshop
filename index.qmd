---
title: Building and versioning reproducible branded documents
subtitle: With Quarto and Git
format:
  jdc-revealjs:
    toc: true
    toc-depth: 1
    incremental: true
    navigation-mode: linear
---

# Current challenges {.slide-blue .jdc-background}

## Who has experienced...

- Opening multiple email attachments to find the "right" version of a report?

- Seeing filenames like: `Report_Final_v3_FINAL_Jan_revised.docx`?

- Being unable to answer "where did this number come from?"?

- Spending hours reformatting a report to match JDC standards?

- Manually merging changes from different offline edits?

## Questions 

- How common are these challenges?

- How do you handle them?

- What do you think could be done to avoid such situations?

## Messy version control systems

- Multiple copies across email, shared folders, etc.

- No centralized tracking of changes 

- Potential for lost changes or extra work when people update documents offline or simultaneously

## Replication/reproducibility crisis

:::: {.columns}

::: {.column width="50%"}

- Data analysis created through undocumented manual steps

- Lack of transparency about methods used

- Challenges in creating derived analyses

:::

::: {.column width="50%"}
![](img/nature-survey.jpg){width=80%}
:::

::::
 
## Formatting burden

- Lack of visual consistency

- Hours spent on manual formatting

- Brand dilution and diminished institutional recognition

## Problems with PDF on the web

Why publishing reports (only) as PDFs isn’t a good idea:

- Poor visibility in search engines

- Low accessibility (e.g. mobile devices and screen readers)

- Difficult to update

- Data can’t be reused

- Limited analytics
 
::: {.notes}
Hard to read on mobile devices; Screen readers often fail to interpret content correctly; Text may be embedded in images, not real text

PDFs are less indexed by search engines; ; Harder for users to find or share specific information

Static files — must re-upload for every correction; 

Tables and charts aren’t easily extractable; Limits data sharing

Difficult to track how users interact with a PDF
:::

## Advantages of web-first reports

- Broader reach and engagement: improved visibility in search engines and increased audience interaction

- Improved analytics: better understanding of audience reach (e.g., Google Analytics)

- Continuous updates: content can be refreshed and versioned using Git

- Interactive content: richer experience with interactive data visualizations

- Exportable as PDF for printing if needed

# Use cases {.slide-blue .jdc-background}

**World Bank**: [Reproducible Research Repository](https://github.com/worldbank/wb-reproducible-research-repository)

**UNHCR**: Quarto templates for [web documents](https://github.com/unhcr-dataviz/quarto-html-unhcr) and [presentations](https://github.com/unhcr-dataviz/quarto-revealjs-unhcr)

**OECD**: data and code for the [States of Fragility report](https://github.com/hdesaioecd/oecd-sfr-2020-master-public)

**World Health Organization**: data and code for the [Global tuberculosis report 2024](https://github.com/GTB-TME/gtbreport2024)

**JDC (WIP)**: [web-based/micro-site report template](https://github.com/jointdatacenter/report-template) 

# Version control with Git {.slide-blue .jdc-background}

## What is Git?

Git is a professional version control system, mostly known through Github, its most famous application/platform.

Originally designed for code development.

It's been used to write any collaborative documents, such as reports, presentations and websites.

## Key features

Git provides three powerful features:

- A "time machine" for text-based documents

- An audit log of every change

- A collaboration system so multiple people can work simultaneously without conflicts

## Pro and cons

:::: {.columns}

::: {.column width="50%"}

✅ 

- Complete version history

- Distributed backup

- Safer offline collaboration

:::

::: {.column width="50%"}

⚠️ 

- New workflow = steep learning curve for newcomers

- Async workflow

- Resolving merge conflicts can be difficult

:::

::::

::: {.notes}

Clear version history – complete record of all edits, making it easy to track what changed, when, and by whom.

Safer offline collaboration – Multiple contributors can work on the same report or website offline.

VS

Steep learning curve for newcomers – Non-technical users may find concepts like commits, branches, and merges unintuitive at first.

No real-time collaboration - Not like Google Docs; async workflow only

Conflicts - Dealing with merging conflicts can be difficult for non-technical users if multiple users edit the same part of the text offline

Overkill for simple reports - May be too complex for solo writers

:::

## Key concepts

Let's see how it works by reviewing key concepts from Git/GitHub:

- Organization

- Repository

- Commit

- Branches

::: {.notes}

Organization is an institutional profile on Github

Repository is a collection of files and folders for a specific project, with the full history of changes (commits). 

Commit is a checkpoint with an explanation of what has changed

Branches are parallel copies of a project used to test ideas without affecting the main version.

:::

# Creating documents with Quarto {.slide-blue .jdc-background}

## Quick review

The state-of-the-art open-source solution for publishing data-driven documents.

Easily combine text, code, images, charts and more.

Quarto separates content from formatting. 

Go from plain-text to reproducible reports, presentations (like this one), dashboards, websites, blogs, and books in HTML, PDF, MS Word, ePub, and more.

## Pro and cons

:::: {.columns}

::: {.column width="50%"}

✅ 

- Easy to edit and reuse elements

- Multiple output formats from the same source

- Embedded code and results

- Automatic formatting/numbering for figures, tables, references etc

:::

::: {.column width="50%"}

⚠️ 

- Learning curve

- No WYSIWYG editing

- Requires technical knowledge to set up or for complex customizations

- Debugging complexity

:::

::::

::: {.notes}

Professional, consistent output – Quarto produces polished PDFs, HTML pages, and presentations from a single source, ensuring brand and format consistency.

Dynamic updates – When data or analysis changes, reports update automatically, reducing manual copy-paste errors.

Transparency and reproducibility – The document keeps text, data, and visuals together, so others can see how results were generated.

VS

Learning curve – Non-technical users may find the markdown syntax and project setup unfamiliar at first.

Limited WYSIWYG editing – no drag-and-drop or visual layout interface like Word or PowerPoint.

Users don't work with standard softwares for text editing (like Word)

:::

# Branded templates

## What is a Quarto template?

A **starter kit** that sets up a project structure, configuration file, theme, and placeholder content.

Ensures **brand consistency** and **repeatable** outputs (HTML, PDF, MS PowerPoint, etc.)

## Hands-on showcase 

- Install Quarto

- Install an interface to facilitate editing
-- VSCode
-- RStudio

- Download a template

- Customize

- Render/export

## Using a template (GUI)

- **RStudio**: *File → New Project → Quarto Project → From Template* → pick a template

- **VS Code**: *Command Palette (Ctrl/Cmd+Shift+P) → Quarto: Create Project → From Template*

- **Command-line interface**: ``quarto use template jointdatacenter/report-template``

## Thank you! {.slide-blue}

Want help?

Drop me a message on Teams or reach me via email.



